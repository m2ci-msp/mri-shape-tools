#ifndef __SCALING_H__
#define __SCALING_H__

#include <armadillo>

class Scaling{

public:

  /*--------------------------------------------------------------------------*/

  Scaling(const double& sx, const double& sy, const double& sz) :
    sx(sx), sy(sy), sz(sz) {

  }

  /*--------------------------------------------------------------------------*/

  Scaling() : 
    sx(1), sy(1), sz(1) {
  }

  /*--------------------------------------------------------------------------*/

  arma::mat get_matrix() const {

    return arma::mat{

      { sx,  0 , 0, 0 },
      {  0, sy,  0, 0 },
      {  0,  0, sz, 0 },
      {  0,  0,  0, 1  }

    };

  }

  /*--------------------------------------------------------------------------*/

  arma::mat get_derivative_sx() const {

    return arma::mat{

      { 1, 0, 0, 0 },
      { 0, 0, 0, 0 },
      { 0, 0, 0, 0 },
      { 0, 0, 0, 0 }

    };

  }

  /*--------------------------------------------------------------------------*/

  arma::mat get_derivative_sy() const {

    return arma::mat{

      { 0, 0, 0, 0 },
      { 0, 1, 0, 0 },
      { 0, 0, 0, 0 },
      { 0, 0, 0, 0 }

    };

  }

  /*--------------------------------------------------------------------------*/

  arma::mat get_derivative_sz() const {

    return arma::mat{

      { 0, 0, 0, 0 },
      { 0, 0, 0, 0 },
      { 0, 0, 1, 0 },
      { 0, 0, 0, 0 }

    };

  }


  /*--------------------------------------------------------------------------*/
private:

  /*--------------------------------------------------------------------------*/

  double sx;
  double sy;
  double sz;

  /*--------------------------------------------------------------------------*/

};

#endif
